#!/bin/sh

clear()
{
	printf '\33[1;1H\33[2J' >&2
}

prompt()
{
	n="$(set -f; set -- $opts; echo $#)"
	{
		echo "Available options:"
		printf "%s\n" $opts | nl
		printf "[1–$n] "
	} >&2
	read -r opt
}

readonly OUT=/tmp/libcompat-gen-$$.h
trap "rm -f $OUT" EXIT
exec 3>$OUT

cat <<C >&3
/* This compatibility header was generated by the libcompat gen script.
   You can find it over at https://git.sr.ht/~mango/libcompat. */

#ifndef LIBCOMPAT_COMPAT_H
#define LIBCOMPAT_COMPAT_H

#if __STDC_VERSION__ >= 202311L
#	define LIBCOMPAT_IS_23 1
#endif
C

opts='
	alignas/alignof
	booleans
	charN_t
	noreturn
	nullptr
	static_assert
	thread_local
	unreachable
'

clear
while { prompt || { echo "^D" >&2; false; }; }
do
	clear
	if echo "$opt" | grep '[^0-9]' >/dev/null
	then
		echo "Invalid option ‘$opt’; input must be an integer." >&2
	elif test $opt -gt $n -o $opt -lt 1
	then
		echo "Index ‘$opt’ out of range [1–$n]" >&2
	else
		want="$(printf "%s\n" $opts | sed "${opt}!d")"
		opts="$(printf "%s\n" $opts | sed "${opt} d")"

		case $want in
		alignas/alignof)
			cat <<-C >&3

			#if !LIBCOMPAT_IS_23
			#	include <stdalign.h>
			#endif
			C
			;;
		booleans)
			cat <<-C >&3

			#if !LIBCOMPAT_IS_23
			#	include <stdbool.h>
			#endif
			C
			;;
		charN_t)
			cat <<-C >&3

			#include <stdint.h>

			typedef unsigned char char8_t;
			typedef uint_least16_t char16_t;
			typedef uint_least32_t char32_t;
			C
			;;
		noreturn)
			cat <<-C >&3

			/* This will break attributes written as [[noreturn]], so instead if you happen
			   to need/want to write that, use [[__noreturn__]] instead. */
			#if LIBCOMPAT_IS_23
			#	define noreturn [[noreturn]]
			#else
			#	include <stdnoreturn.h>
			#endif
			C
			;;
		nullptr)
			cat <<-C >&3

			#if !LIBCOMPAT_IS_23
			#	ifndef NULL
			#		include <stddef.h>
			#	endif
			#	define nullptr NULL
			#endif
			C
			;;
		static_assert)
			cat <<-C >&3

			#if !LIBCOMPAT_IS_23
			#	define static_assert(e, ...) _Static_assert(e, ""__VA_ARGS__)
			#endif
			C
			;;
		thread_local)
			cat <<-C >&3

			#if !LIBCOMPAT_IS_23
			#	define thread_local _Thread_local
			#endif
			C
			;;
		unreachable)
			cat <<-C >&3

			#ifndef unreachable
			#	if defined(__GNUC__) || defined(__clang__)
			#		define unreachable() __builtin_unreachable()
			#	else
			#		define unreachable() do *(int *)0 = 0; while (0)
			#	endif
			#endif
			C
			;;
		esac
	fi
	test -z "$(echo $opts)" && break
done

cat <<C >&3

#endif /* !LIBCOMPAT_COMPAT_H */
C

cat $OUT
